events {
    worker_connections 1024;
}

http {
    server_tokens off;
    charset utf-8;
    # Define the rate limiting zone in the http context
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    # Enable Gzip Compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;
    gzip_vary on;

    # Proxy Cache Path
    proxy_cache_path /tmp/cache levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;

    upstream client {
        server app:80;
    }
    upstream client2 {
        server app2:3001;
    }

    upstream server {
        server api:5000;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80; # Listen on IPv4
        listen [::]:80; # Listen on IPv6

        server_name apii.fr.to npm.fr.to;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name www.npm.fr.to;

        ssl_certificate /etc/letsencrypt/live/apii.fr.to/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/apii.fr.to/privkey.pem;

        # Redirect www to non-www over HTTPS
        return 301 https://npm.fr.to$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name www.apii.fr.to;

        ssl_certificate /etc/letsencrypt/live/apii.fr.to/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/apii.fr.to/privkey.pem;

        # Redirect www to non-www over HTTPS
        return 301 https://apii.fr.to$request_uri;
    }

    server {
        listen 443 ssl; # Listen on IPv4 for SSL
        listen [::]:443 ssl; # Listen on IPv6 for SSL

        server_name apii.fr.to;

        ssl_certificate /etc/letsencrypt/live/apii.fr.to/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/apii.fr.to/privkey.pem;

        # Strong SSL/TLS configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling on;
        ssl_stapling_verify on;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "no-referrer-when-downgrade";
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' ws: wss:; media-src 'self' data:; object-src 'none';";
        add_header Cache-Control "public, max-age=31536000, immutable";

        # Handling API Responses
        location / {
            proxy_pass http://client;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # try_files $uri $uri/ /index.html;

        }

        # handle api
        location /api {
            proxy_pass http://server; # The backend API server

            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Enable caching
            proxy_cache my_cache;
            proxy_cache_valid 200 5m; # Cache 200 responses for 5 minutes
            proxy_cache_valid 404 1m; # Cache 404 responses for 1 minute
            proxy_ignore_headers Cache-Control Expires; # Ignore certain headers coming from upstream
            proxy_cache_bypass $http_cache_bust; # Bypass cache if this header is set

            # Allow serving stale responses in case of timeout or other errors
            proxy_cache_use_stale error timeout invalid_header updating;
            proxy_cache_background_update on; # Update the cache in the background
        }

    }

    server {
        listen 443 ssl; # Listen on IPv4 for SSL
        listen [::]:443 ssl; # Listen on IPv6 for SSL

        server_name npm.fr.to;

        ssl_certificate /etc/letsencrypt/live/apii.fr.to/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/apii.fr.to/privkey.pem;

        # Strong SSL/TLS configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling on;
        ssl_stapling_verify on;
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "no-referrer-when-downgrade";
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' ws: wss:; media-src 'self' data:; object-src 'none';";
        add_header Cache-Control "public, max-age=31536000, immutable";

        # Handling API Responses
        location / {
            proxy_pass http://client2;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Enable caching for API responses
            proxy_cache my_cache;
            proxy_cache_valid 20m; # Adjust cache time based on your needs
            proxy_cache_key $scheme$host$uri$args; # Set cache key based on request details
            proxy_cache_methods GET; # Cache only GET requests (modify for other methods)

            # Allow serving stale responses in case of timeout or other errors
            proxy_cache_use_stale error timeout invalid_header updating;
            proxy_cache_background_update on; # Update the cache in the background
        }
    }
}

